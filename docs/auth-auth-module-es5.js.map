{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/message.service.ts","webpack:///src/app/auth/message/message.component.ts","webpack:///src/app/auth/message/message.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/register/register.component.html","webpack:///src/app/directive/fieldsMustMatch.directive.ts","webpack:///src/app/validator/fieldsMustMatch.validator.ts"],"names":["authRoutes","path","component","children","AuthRoutingModule","forChild","imports","exports","AuthComponent","templateUrl","AuthModule","declarations","LoginComponent","authService","router","route","messageService","isLoading","form","valid","email","value","password","authObs","login","subscribe","response","navigate","reset","errorMsg","setMessage","onSubmit","selector","MessageService","subject","message","next","text","asObservable","providedIn","MessageComponent","messageSub","getMessage","unsubscribe","RegisterComponent","error","firstName","lastName","signup","FieldsMustMatchDerective","fieldsMustMatch","formGroup","length","provide","useExisting","multi","providers","FieldsMustMatch","controlName","controlNameMatch","control","controls","controlMatch","errors","setErrors","mustMatch"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Route, RouterModule } from \"@angular/router\";\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegisterComponent } from \"./register/register.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\nconst authRoutes: Route[] = [\r\n  {\r\n    path: \"\",\r\n    component: AuthComponent,\r\n    children: [\r\n      { path: \"login\", component: LoginComponent },\r\n      { path: \"register\", component: RegisterComponent },\r\n    ],\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(authRoutes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  //selector: \"app-auth\",\r\n  templateUrl: \"./auth.component.html\",\r\n  //styleUrls: [\"./auth.component.css\"],\r\n})\r\nexport class AuthComponent {}\r\n","<app-message></app-message>\r\n<div class=\"row\">\r\n  <div class=\"col-12 col-md-8 offset-md-2\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { AuthComponent } from \"./auth.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { FieldsMustMatchDerective } from \"../directive/fieldsMustMatch.directive\";\nimport { MessageComponent } from \"./message/message.component\";\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n    RegisterComponent,\n    FieldsMustMatchDerective,\n    MessageComponent,\n  ],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, AuthRoutingModule],\n})\nexport class AuthModule {}\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { AuthService, AuthResponseData } from \"../auth.service\";\r\nimport { MessageService } from \"../message.service\";\r\n\r\n@Component({\r\n  selector: \"app-auth-login\",\r\n  templateUrl: \"./login.component.html\",\r\n})\r\nexport class LoginComponent {\r\n  isLoading: boolean = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private messageService: MessageService\r\n  ) {}\r\n\r\n  onSubmit(form: NgForm) {\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n\r\n    const email = form.value.email;\r\n    const password = form.value.password;\r\n\r\n    this.isLoading = true;\r\n    let authObs: Observable<AuthResponseData>;\r\n    authObs = this.authService.login(email, password);\r\n    authObs.subscribe(\r\n      (response) => {\r\n        this.isLoading = false;\r\n        this.router.navigate([\"/recipes\"]);\r\n        form.reset();\r\n      },\r\n      (errorMsg) => {\r\n        this.messageService.setMessage(errorMsg);\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<form #authLoginForm=\"ngForm\" (ngSubmit)=\"onSubmit(authLoginForm)\">\r\n  <div class=\"form-group\">\r\n    <label for=\"email\">E-mail</label>\r\n    <input\r\n      type=\"email\"\r\n      id=\"email\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"email\"\r\n      required\r\n      email\r\n      #email=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': email.touched && !email.valid }\"\r\n    />\r\n    <div *ngIf=\"email.touched && !email.valid\" class=\"invalid-feedback\">\r\n      <div>Email is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"password\">Password</label>\r\n    <input\r\n      type=\"password\"\r\n      id=\"password\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"password\"\r\n      required\r\n      minlength=\"6\"\r\n      #password=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': password.touched && !password.valid }\"\r\n    />\r\n    <div *ngIf=\"password.touched && !password.valid\" class=\"invalid-feedback\">\r\n      <div *ngIf=\"password.errors.required\">Password is required</div>\r\n      <div *ngIf=\"password.errors.minlength\">\r\n        Password must be at least 6 characters\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary\"\r\n      [disabled]=\"!authLoginForm.valid || isLoading\"\r\n    >\r\n      <span\r\n        *ngIf=\"isLoading\"\r\n        class=\"spinner-border spinner-border-sm mr-1\"\r\n      ></span>\r\n      Log in\r\n    </button>\r\n    <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n  </div>\r\n</form>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MessageService {\r\n  private subject = new Subject<any>();\r\n\r\n  public setMessage(message: string) {\r\n    this.subject.next({ text: message });\r\n  }\r\n\r\n  public getMessage() {\r\n    return this.subject.asObservable();\r\n  }\r\n\r\n  public clearMessage() {\r\n    this.subject.next();\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\r\nimport { MessageService } from \"../message.service\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-message\",\r\n  templateUrl: \"message.component.html\",\r\n})\r\nexport class MessageComponent implements OnInit, OnDestroy {\r\n  @Input() message: string = null;\r\n  messageSub: Subscription;\r\n\r\n  constructor(private messageService: MessageService) {}\r\n\r\n  ngOnInit() {\r\n    this.messageSub = this.messageService.getMessage().subscribe((message) => {\r\n      this.message = message.text;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.messageSub.unsubscribe();\r\n  }\r\n\r\n  onClose() {\r\n    this.message = null;\r\n  }\r\n}\r\n","<div *ngIf=\"message\" class=\"alert alert-danger alert-dismissable container\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    data-dismiss=\"alert\"\r\n    aria-label=\"Close\"\r\n    (click)=\"onClose()\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <span>{{ message }}</span>\r\n</div>\r\n","import { Component } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { AuthService, AuthResponseData } from \"../auth.service\";\r\nimport { MessageService } from \"../message.service\";\r\n\r\n@Component({\r\n  selector: \"app-auth-register\",\r\n  templateUrl: \"./register.component.html\",\r\n})\r\nexport class RegisterComponent {\r\n  error: string = null;\r\n  isLoading: boolean = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private messageService: MessageService\r\n  ) {}\r\n\r\n  onSubmit(form: NgForm) {\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n\r\n    const email = form.value.email;\r\n    const password = form.value.password;\r\n    const firstName = form.value.firstName;\r\n    const lastName = form.value.lastName;\r\n\r\n    this.isLoading = true;\r\n    let authObs: Observable<AuthResponseData>;\r\n    authObs = this.authService.signup(email, password, firstName, lastName);\r\n    authObs.subscribe(\r\n      (response) => {\r\n        this.isLoading = false;\r\n        form.reset();\r\n        this.router.navigate([\"/recipes\"]);\r\n      },\r\n      (errorMsg) => {\r\n        this.messageService.setMessage(errorMsg);\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<form\r\n  #authRegForm=\"ngForm\"\r\n  (ngSubmit)=\"onSubmit(authRegForm)\"\r\n  [fieldsMustMatch]=\"['password', 'confirmPassword']\"\r\n>\r\n  <div class=\"form-group\">\r\n    <label for=\"firstName\">First name</label>\r\n    <input\r\n      type=\"text\"\r\n      id=\"firstName\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"firstName\"\r\n      required\r\n      #firstName=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': firstName.touched && !firstName.valid }\"\r\n    />\r\n    <div *ngIf=\"firstName.touched && !firstName.valid\" class=\"invalid-feedback\">\r\n      <div>First Name is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"lastName\">Last name</label>\r\n    <input\r\n      type=\"text\"\r\n      id=\"lastName\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"lastName\"\r\n      required\r\n      #lastName=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': lastName.touched && !lastName.valid }\"\r\n    />\r\n    <div *ngIf=\"lastName.touched && !lastName.valid\" class=\"invalid-feedback\">\r\n      <div>Last Name is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"email\">E-mail</label>\r\n    <input\r\n      type=\"email\"\r\n      id=\"email\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"email\"\r\n      required\r\n      email\r\n      #email=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': email.touched && !email.valid }\"\r\n    />\r\n    <div *ngIf=\"email.touched && !email.valid\" class=\"invalid-feedback\">\r\n      <div>Email is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"password\">Password</label>\r\n    <input\r\n      type=\"password\"\r\n      id=\"password\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"password\"\r\n      required\r\n      minlength=\"6\"\r\n      #password=\"ngModel\"\r\n      [ngClass]=\"{ 'is-invalid': password.touched && !password.valid }\"\r\n    />\r\n    <div *ngIf=\"password.touched && !password.valid\" class=\"invalid-feedback\">\r\n      <div *ngIf=\"password.errors.required\">Password is required</div>\r\n      <div *ngIf=\"password.errors.minlength\">\r\n        Password must be at least 6 characters\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"confirmPassword\">Confirm password</label>\r\n    <input\r\n      type=\"password\"\r\n      id=\"confirmPassword\"\r\n      class=\"form-control\"\r\n      ngModel\r\n      name=\"confirmPassword\"\r\n      required\r\n      #confirmPassword=\"ngModel\"\r\n      [ngClass]=\"{\r\n        'is-invalid': confirmPassword.touched && !confirmPassword.valid\r\n      }\"\r\n    />\r\n    <div\r\n      *ngIf=\"confirmPassword.touched && !confirmPassword.valid\"\r\n      class=\"invalid-feedback\"\r\n    >\r\n      <div *ngIf=\"confirmPassword.errors.required\">\r\n        Confirm password is required\r\n      </div>\r\n      <div *ngIf=\"confirmPassword.errors.mustMatch\">\r\n        Confirm password must match\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary\"\r\n      [disabled]=\"!authRegForm.valid || isLoading\"\r\n    >\r\n      <span\r\n        *ngIf=\"isLoading\"\r\n        class=\"spinner-border spinner-border-sm mr-1\"\r\n      ></span>\r\n      Create account\r\n    </button>\r\n    <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n  </div>\r\n</form>\r\n","import {\r\n  Validator,\r\n  FormGroup,\r\n  ValidationErrors,\r\n  NG_VALIDATORS,\r\n} from \"@angular/forms\";\r\nimport { Input, Directive } from \"@angular/core\";\r\n\r\nimport { FieldsMustMatch } from \"../validator/fieldsMustMatch.validator\";\r\n\r\n@Directive({\r\n  selector: \"[fieldsMustMatch]\",\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: FieldsMustMatchDerective,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class FieldsMustMatchDerective implements Validator {\r\n  @Input(\"fieldsMustMatch\") fieldsMustMatch: string[] = [];\r\n\r\n  validate(formGroup: FormGroup): ValidationErrors {\r\n    if (this.fieldsMustMatch.length < 2) {\r\n      return null;\r\n    }\r\n    return FieldsMustMatch(\r\n      this.fieldsMustMatch[0],\r\n      this.fieldsMustMatch[1]\r\n    )(formGroup);\r\n  }\r\n}\r\n","import { FormGroup } from \"@angular/forms\";\r\n\r\nexport function FieldsMustMatch(controlName: string, controlNameMatch: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const controlMatch = formGroup.controls[controlNameMatch];\r\n\r\n    if (!control || !controlMatch) {\r\n      return null;\r\n    }\r\n\r\n    if (controlMatch.errors) {\r\n      return null;\r\n    }\r\n\r\n    if (control.value !== controlMatch.value) {\r\n      controlMatch.setErrors({ mustMatch: true });\r\n    } else {\r\n      controlMatch.setErrors(null);\r\n    }\r\n  };\r\n}\r\n"]}